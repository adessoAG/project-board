import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
		keycloakVersion = '4.8.1.Final'
		unboundIDVersion = '3.1.1'
		hibernateSearchVersion = '5.10.5.Final'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'net.ltgt.apt' version '0.10'
	id "org.sonarqube" version "2.5"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.ltgt.apt'
apply plugin: 'jacoco'

group = 'de.adesso'
version = '1.0.0-SNAPSHOT'

targetCompatibility = 11
sourceCompatibility = 11

jacoco {
	toolVersion = "0.8.2"
}

jacocoTestReport {
	reports {
		html.destination file("${buildDir}/jacocoHtml")
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.keycloak.bom:keycloak-adapter-bom:${keycloakVersion}"
	}
}

dependencies {
	compile(
			[group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'],
			[group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'],
			[group: 'org.springframework.boot', name: 'spring-boot-starter-web'],
			[group: 'org.springframework.boot', name: 'spring-boot-starter-security'],
			[group: 'org.springframework.boot', name: 'spring-boot-starter-mail']
	)
	compile(group: 'org.keycloak', name: 'keycloak-spring-boot-starter')
	compile(group: 'org.springframework.ldap', name: 'spring-ldap-core')
	compile(group: 'mysql', name: 'mysql-connector-java')
	compile(group: 'org.hibernate', name: 'hibernate-search-orm', version: "${hibernateSearchVersion}")

	compile(group: 'org.apache.velocity', name: 'velocity-engine-core', version: '2.0')
	compile(group: 'org.apache.velocity.tools', name: 'velocity-tools-generic', version: '3.0')

	compileOnly(group: 'org.springframework.boot', name: 'spring-boot-configuration-processor')
	compileOnly(group: 'org.projectlombok', name: 'lombok')

	runtime(group: 'org.springframework.boot', name: 'spring-boot-devtools')
	runtime(group: 'org.hsqldb', name: 'hsqldb')

	testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test')
	testCompile(group: 'org.springframework.security', name: 'spring-security-test')
    testCompile(group: 'org.springframework.ldap', name: 'spring-ldap-test')

	annotationProcessor(group: 'org.projectlombok', name: 'lombok')

	apt(group: 'org.projectlombok', name: 'lombok')
}

task dockerCopy(dependsOn: build) {
	doFirst {
		delete 'docker/temp'
	}

	doLast {
		copy {
			from('docker') {
				include '*.properties'

				filter { String line ->
					def tokensInLine = line.findAll('@\\w+@')
					def replacedLine = line

					tokensInLine.each {
						def tokenWithoutDelimiters = it.replace('@', '')
						def envVariable = System.getenv(tokenWithoutDelimiters)
						def tokenReplacement = (envVariable != null) ? envVariable : System.getProperty(tokenWithoutDelimiters)

						if(!tokenReplacement) {
							throw new IllegalStateException("Could not replace token ${it} in property file! " +
									"No system property or environment variable set!")
						}

						replacedLine = replacedLine.replace("${it}", tokenReplacement)
					}

					return replacedLine
				}
			}

			from('docker') {
				include 'Dockerfile'

				filter(ReplaceTokens, tokens: [
						JAR_NAME: jar.archiveName
				])
			}

			from "${buildDir}/libs/${jar.archiveName}"

			into 'docker/temp'
		}
	}
}

clean.doFirst {
	delete 'docker/temp'
}
