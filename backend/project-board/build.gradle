import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
	ext {
		springBootVersion = '2.1.1.RELEASE'
		keycloakVersion = '4.8.1.Final'
		unboundIDVersion = '3.1.1'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
	id 'net.ltgt.apt' version '0.10'
	id "org.sonarqube" version "2.5"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.ltgt.apt'
apply plugin: 'jacoco'

group = 'de.adesso'
version = '1.0.0-SNAPSHOT'

targetCompatibility = 11
sourceCompatibility = 11

jacoco {
	toolVersion = "0.8.2"
}

jacocoTestReport {
	reports {
		html.destination file("${buildDir}/jacocoHtml")
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.keycloak.bom:keycloak-adapter-bom:${keycloakVersion}"
	}
}

dependencies {
	compile(
			[group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'],
			[group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'],
			[group: 'org.springframework.boot', name: 'spring-boot-starter-web'],
			[group: 'org.springframework.boot', name: 'spring-boot-starter-security'],
			[group: 'org.springframework.boot', name: 'spring-boot-starter-mail']
	)
	compile(group: 'org.keycloak', name: 'keycloak-spring-boot-starter')
	compile(group: 'org.springframework.ldap', name: 'spring-ldap-core')
	compile(group: 'mysql', name: 'mysql-connector-java')

	compileOnly(group: 'org.springframework.boot', name: 'spring-boot-configuration-processor')
	compileOnly(group: 'org.projectlombok', name: 'lombok')

	runtime(group: 'org.springframework.boot', name: 'spring-boot-devtools')
	runtime(group: 'org.hsqldb', name: 'hsqldb')

	testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test')
	testCompile(group: 'org.springframework.security', name: 'spring-security-test')
    testCompile(group: 'org.springframework.ldap', name: 'spring-ldap-test')
	// testCompile(group: 'com.unboundid', name: 'unboundid-ldapsdk', version: "${unboundIDVersion}")

	annotationProcessor(group: 'org.projectlombok', name: 'lombok')

	apt(group: 'org.projectlombok', name: 'lombok')
}

task dockerBuild(dependsOn: build) {
	doFirst {
		delete 'docker/temp'
	}

	doLast {
		copy {
			from('docker') {
				include 'application.properties'

				filter(ReplaceTokens, tokens: [
						datasourceDialect: System.getProperty('datasourceDialect'),
						datasourceUrl: System.getProperty('datasourceUrl'),
						datasourceUsername: System.getProperty('datasourceUsername'),
						datasourcePassword: System.getProperty('datasourcePassword')
				])
			}

			from('docker') {
				include 'application-adesso-jira.properties'

				filter(ReplaceTokens, tokens: [
						jiraUrl: System.getProperty('jiraUrl'),
						jiraUsername: System.getProperty('jiraUsername'),
						jiraPassword: System.getProperty('jiraPassword')
				])
			}

			from('docker') {
				include 'application-adesso-ad.properties'

				filter(ReplaceTokens, tokens: [
						ldapUrl: System.getProperty('ldapUrl'),
						ldapUsername: System.getProperty('ldapUsername'),
						ldapPassword: System.getProperty('ldapPassword'),
						ldapBase: System.getProperty('ldapBase')
				])
			}

			from('docker') {
				include 'application-keycloak.properties'

				filter(ReplaceTokens, tokens: [
						keycloakUrl: System.getProperty('keycloakUrl'),
						keycloakRealm: System.getProperty('keycloakRealm'),
						keycloakClient: System.getProperty('keycloakClient'),
				])
			}

			from('docker') {
				include 'Dockerfile'

				filter(ReplaceTokens, tokens: [
						jarName: jar.archiveName
				])
			}

			from "${buildDir}/libs/${jar.archiveName}"

			into 'docker/temp'
		}
	}
}

clean.doFirst {
	delete 'docker/temp'
}